{"version":3,"file":"main.component.js","sourceRoot":"","sources":["../../../chat/main/main.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport {Observable} from \"rxjs\";\nimport { MyWebSocketService } from '../my-web-socket.service';\n// import {EventSourcePolyfill} from 'ng-event-source';\nimport { People } from './people.type';\nimport * as env from '../env';\n@Component({selector: 'my-chat',\n  template: '<div id=\"my-chat\" class=\"my-chat\" *ngIf=\"peoples!=undefined\"> <div id=\"ng-chat\"> <div id=\"ng-chat-people\" [ngClass]=\"{\\'ng-chat-people-collapsed\\': is_collapse}\" > <a  class=\"ng-chat-title shadowed\" href=\"javascript:void(0);\" (click)=\"collapseIt(\\'is_collapse\\')\"> <span > Friends </span> </a> <input  id=\"ng-chat-search_friend\" type=\"search\" placeholder=\"Search\" class=\"ng-untouched ng-pristine ng-valid\" [(ngModel)]=\"search_people\"> <!----><ul  id=\"ng-chat-users\"> <!----><li *ngFor=\"let people of peoples | searchPipe:\\'name\\':search_people;let i=index\" (click)=\"peopleOnclick(i)\"> <!----> <!----><img  alt=\"\" class=\"avatar\" height=\"30\" width=\"30\" [src]=\"people.image\"> <strong  [title]=\"people.name\">{{people.name}} <span class=\"un-read-message\" *ngIf=\"people.unread_message_count!=undefined\"> {{ people.unread_message_count }} </span> </strong> <span  class=\"ng-chat-user-status {{people.status}}\" title=\"{{people.name}}\"></span> </li> </ul> </div> <!----> <div [ngClass]=\"{\\'ng-chat-people-collapsed\\': is_collapse2 , \\'ng-chat-window\\' : true}\"  style=\"right: 282px;\" *ngIf=\"selected_people!=undefined\" > <div  class=\"ng-chat-title\" (click)=\"collapseIt(\\'is_collapse2\\')\"> <strong  title=\"Arya Stark\"> {{selected_people.name}} </strong> <span  class=\"ng-chat-user-status {{selected_people.status}}\" [title]=\"selected_people.status\"></span> <!----> <a  class=\"ng-chat-close\" href=\"javascript:void(0);\" (click)=\"closeChat()\">X</a> </div> <div  class=\"ng-chat-messages\"> <!----> <div *ngFor=\"let chat_message of selected_people.messages\"> <div class=\"ng-chat-message\" *ngIf=\"chat_message.type==\\'sent\\' \"> <span >{{chat_message.msg}}</span> </div> <div  class=\"ng-chat-message ng-chat-message-received\" *ngIf=\"chat_message.type==\\'received\\'\"> <img  alt=\"\" class=\"avatar\" height=\"30\" width=\"30\" [src]=\"selected_people.image\"> <span >{{chat_message.msg}}</span> </div> </div> </div> <form (ngSubmit)=\"sendMessage()\"> <input #message_box  type=\"text\" placeholder=\"Type a message\" name=\"message\" [(ngModel)]=\"message\" class=\"\">  </form> </div> </div> </div>',\n  styles: ['#ng-chat { position: fixed; z-index: 999; right: 0; bottom: 0; color: #5C5C5C; font-family: Arial, Helvetica, sans-serif; -webkit-box-sizing: initial; box-sizing: initial; font-size: 11pt; text-align: left; } #ng-chat-people { position: relative; width: 240px; height: 360px; border: 1px solid #A3A3A3; margin-right: 20px; background-color: #FFF; -webkit-box-shadow: 0 4px 8px rgba(0,0,0,.25); box-shadow: 0 4px 8px rgba(0,0,0,.25); border-bottom: 0; } #ng-chat-people.ng-chat-people-collapsed , .ng-chat-people-collapsed.ng-chat-window { height: 30px; } .ng-chat-title.shadowed { -webkit-box-shadow: 0 4px 8px rgba(0,0,0,.25); box-shadow: 0 4px 8px rgba(0,0,0,.25); } .ng-chat-title, .ng-chat-title:hover { position: relative; z-index: 2; height: 30px; line-height: 30px; font-size: 0.9em; padding: 0 10px; background-color: #FAFAFA; display: block; text-decoration: none; color: inherit; font-weight: 400; cursor: pointer; } #ng-chat-search_friend { display: block; padding: 7px 10px; margin: 0 auto; width: calc(100% - 20px); margin-top: 10px; font-size: 0.9em; -webkit-appearance: searchfield; } #ng-chat-users { padding: 0 10px; list-style: none; margin: 0; overflow: auto; position: absolute; top: 84px; bottom: 0; width: 100%; -webkit-box-sizing: border-box; box-sizing: border-box; } #ng-chat-users li { clear: both; margin-bottom: 10px; overflow: hidden; cursor: pointer; max-height: 30px; } #ng-chat-users li > img, #ng-chat-users li > .icon-wrapper { float: left; margin-right: 5px; border-radius: 25px; } #ng-chat-users li > strong { float: left; line-height: 30px; font-size: 0.8em; max-width: 57%; max-height: 30px; overflow: hidden; white-space: nowrap; text-overflow: ellipsis; } #ng-chat-users li > .ng-chat-user-status { float: right; } .ng-chat-user-status.online { background-color: #92A400; } .ng-chat-user-status.busy { background-color: #F91C1E; } .ng-chat-user-status.offline { background-color: #BABABA; } .ng-chat-user-status { border-radius: 25px; width: 8px; height: 8px; margin-top: 10px; } /*** chat window ***/ .ng-chat-window { right: 260px; height: 360px; z-index: 999; bottom: 0; position: fixed; width: 300px; border: 1px solid #A3A3A3; border-bottom: 0; -webkit-box-shadow: 0 4px 8px rgba(0,0,0,.25); box-shadow: 0 4px 8px rgba(0,0,0,.25); } .ng-chat-title > strong { font-weight: 600; display: block; overflow: hidden; height: 30px; text-overflow: ellipsis; white-space: nowrap; max-width: 85%; float: left; } .ng-chat-title > .ng-chat-user-status { float: left; margin-left: 5px; } .ng-chat-close { color: #5C5C5C; text-decoration: none; float: right; } .ng-chat-window .ng-chat-messages { padding: 10px; height: calc(90% - 30px); -webkit-box-sizing: border-box; box-sizing: border-box; position: relative; overflow: auto; background-color: #FFF; } .ng-chat-window .ng-chat-messages .ng-chat-message { clear: both; } .ng-chat-window .ng-chat-messages .ng-chat-message > span { float: right; width: 65%; padding: 0; margin-top: 0; background-color: #E3E3E3; border-radius: 5px; padding: 10px; margin-top: 0; margin-bottom: 5px; font-size: 0.9em; word-wrap: break-word; } .ng-chat-window .ng-chat-messages .ng-chat-message > img, .ng-chat-window .ng-chat-messages .ng-chat-message > .icon-wrapper { position: absolute; left: 10px; border-radius: 25px; } .ng-chat-window .ng-chat-messages .ng-chat-message.ng-chat-message-received > span { float: left; margin-left: 40px; padding-top: 7px; padding-bottom: 7px; background-color: #FFF; border: 3px solid #E3E3E3; margin-top: 0; margin-bottom: 5px; } .ng-chat-window  input { font-size: 0.8em; -webkit-box-sizing: border-box; box-sizing: border-box; padding: 0 5px; display: block; height: 35px; width: 100%; border: none; border-top: 1px solid #A3A3A3; } span.un-read-message { border-radius: 50%; padding: 3px 6px; background: #92a401; color: white; font-size: 9px; } ']\n})\nexport class MainComponent implements OnInit {\n\n  @Input() peoples;\n  @Input() current_user_id:number;\n  @Input() my_env;\n\n \n  @Output() beforeSend = new EventEmitter<any>();\n  @Output() afterSend = new EventEmitter<any>();\n  @Output() afterUserSelect = new EventEmitter<any>();\n\n  private selected_people ;\n  private is_collapse:boolean;\n  private is_collapse2:boolean;\n  private _my_web_soket;\n  private message:any;\n\n\n  constructor() { \n    this.is_collapse = false;\n    \n  }\n\n  ngOnInit() {\n    let socket_url;\n    if(this.my_env!=undefined && this.my_env.web_socket_url!=undefined)\n    {\n      socket_url = this.my_env.web_socket_url;\n    }\n    else\n      socket_url = env.web_socket_url;\n    \n    this._my_web_soket =  new MyWebSocketService(socket_url,'?my_id='+this.current_user_id);\n\n    //after recevied message\n\n    this._my_web_soket.componentMethodCalled$.subscribe(\n        (data) => {\n\n          if(data.type=='new-join')\n          {\n            this.peoples.map((people)=>{\n              if(people.id==parseInt(data.msg))\n              {\n                people.status = 'online';\n              }\n              return people;\n            })\n            //console.log(this.peoples);\n          }\n          else if(data.type=='find_friends_status')\n          {\n            this.peoples.map((people)=>{\n              if(data.msg.indexOf(people.id)!=-1)\n              {\n                people.status = 'online';\n              }\n              else\n                people.status = 'offline';\n\n              return people;\n            })\n\n          }\n          else if(data.type=='friend-exit')\n          {\n            this.peoples.map((people)=>{\n              if(people.id==parseInt(data.msg))\n              {\n                people.status = 'offline';\n              }\n              return people;\n            })\n          }\n          else if(data.type=='message'){\n            let from_id = parseInt(data.my_id);\n\n            this.peoples.map((people)=>{\n              if(people.id==from_id)\n              {\n                people.messages.push(\n                {\n                  status : 'received',\n                  type : 'received',\n                  msg : data.msg\n                });\n\n                if(this.selected_people==undefined || this.selected_people.id!=from_id)\n                {\n                  if(people.unread_message_count!=undefined)\n                    people.unread_message_count = people.unread_message_count+1;\n                  else\n                    people.unread_message_count = 1;\n                }\n              }\n              return people;\n            });\n\n          }\n\n        }\n      );\n\n    let peoples_id:any = [];\n    console.log(this.peoples);\n\n    for (var i = 0; i < this.peoples.length; i++) {\n\n      peoples_id.push(this.peoples[i].id);\n    }\n    this._my_web_soket.my_id = this.current_user_id;\n    this._my_web_soket.friends_list = peoples_id;\n\n    \n  }\n\n  collapseIt(target)\n  {\n    this[target] == true ? this[target]=false : this[target]=true;\n  }\n\n  peopleOnclick(index)\n  {\n\n    this.selected_people = this.peoples[index];\n    this.selected_people.unread_message_count = undefined;\n    this.afterUserSelect.emit(this.peoples[index]);\n    if(this.selected_people.status=='online'){\n\n      /*\n      let message = {'type':'subscribe',\n        'my_id':this.current_user_id,\n        'to_id':this.selected_people.id\n      };\n\n\n      //this.doSendMessage(message);\n      */\n\n    }\n\n\n  }\n\n  closeChat()\n  {\n    /*\n    this._my_web_soket.doSend(\n\n      JSON.stringify({'type':'exit',\n      'my_id':this.current_user_id\n    }));\n    */\n\n    this.selected_people = undefined;\n  }\n\n  sendMessage()\n  {\n    if(this.message != ''){\n\n      this.doSendMessage(\n\n          {'type':'message',\n          'my_id':this.current_user_id,\n          'to_id':this.selected_people.id,\n          'message' : this.message\n        });\n\n      this.selected_people.messages.push({\n        status : 'sent',\n        type : 'sent',\n        msg : this.message\n      });\n\n      this.message = '';\n    }\n\n  }\n\n  doSendMessage(message)\n  {\n    if(this.beforeSend!=undefined)\n      this.beforeSend.emit(message);\n\n    this._my_web_soket.doSend(JSON.stringify(message));\n\n    if(this.afterSend!=undefined){\n      this.afterSend.emit(message);\n    }\n  }\n\n\n\n\n}\n"]}