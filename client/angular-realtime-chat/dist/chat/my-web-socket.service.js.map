{"version":3,"file":"my-web-socket.service.js","sourceRoot":"","sources":["../../chat/my-web-socket.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;;IAiBrC,4BAAY,GAAG,EAAC,UAAe;QAA/B,iBAeC;qBA1BoB,CAAC;;yCAKc,IAAI,OAAO,EAAO;;sCAG7B,IAAI,CAAC,yBAAyB,CAAC,YAAY,EAAE;QAIrE,IAAI,CAAC,SAAS,GAAI,IAAI,SAAS,CAAC,KAAK,GAAC,GAAG,GAAC,UAAU,CAAC,CAAC;QAEtD,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,UAAC,CAAC;YACrB,KAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;SACjB,CAAC;QAGF,IAAI,CAAC,SAAS,CAAC,SAAS,GAAG,UAAC,CAAC;YACzB,KAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;SACpB,CAAC;QAEF,IAAI,CAAC,SAAS,CAAC,OAAO,GAAG,UAAC,CAAC;YACvB,KAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;SAClB,CAAC;KACH;IAED,mCAAM,GAAN,UAAO,CAAC;QAEN,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QAEf,IAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAC,CAAC,EAAC;YAE5B,IAAI,CAAC,MAAM,CACT,IAAI,CAAC,SAAS,CAAC,EAAC,MAAM,EAAC,qBAAqB;gBACxC,SAAS,EAAG,IAAI,CAAC,YAAY;gBAC7B,OAAO,EAAG,IAAI,CAAC,KAAK;aACrB,CAAC,CACH,CAAC;SACL;KAEF;IAED,sCAAS,GAAT,UAAU,CAAC;QAET,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAA;QAC7B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAElB,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAE3C;IAED,oCAAO,GAAP,UAAQ,CAAC;KAGR;IAGD,mCAAM,GAAN,UAAO,OAAO;QAEV,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAC,OAAO,CAAC,CAAC;QAC9B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KAGhC;;gBArEF,UAAU;;;;;;;6BAJX;;SAKa,kBAAkB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\n@Injectable()\nexport class MyWebSocketService {\n\nprivate websocket;\nprivate state:number = 0;\npublic friends_list:Array<number>;\npublic my_id : number;\n\n  // Observable string sources\n  private componentMethodCallSource = new Subject<any>();\n  \n  // Observable string streams\n  componentMethodCalled$ = this.componentMethodCallSource.asObservable();\n\n\n  constructor(url,query_parm?:any) { \n  \tthis.websocket =  new WebSocket('ws:'+url+query_parm);\n\n  \tthis.websocket.onopen = (e) => {\n        this.onOpen(e)\n    };\n\n\n    this.websocket.onmessage = (e) => {\n        this.onMessage(e)\n    };\n\n    this.websocket.onerror = (e) => {\n        this.onError(e)\n    };\n  }\n\n  onOpen(e)\n  {\n    this.state = 1;\n\n    if(this.friends_list.length>0){\n\n      this.doSend(\n        JSON.stringify({'type':'find_friends_status',\n            'friends' : this.friends_list,\n            'my_id' : this.my_id\n          })\n        );\n    }\n\n  }\n\n  onMessage(e)\n  {\n    let data = JSON.parse(e.data)\n    console.log(data);\n    \n    this.componentMethodCallSource.next(data);\n\n  }\n\n  onError(e)\n  {\n\n  }\n\n\n  doSend(message) {\n    \n      console.log('dosend'+message);\n      this.websocket.send(message);\n    \n\n  }\n\n\n}\n"]}